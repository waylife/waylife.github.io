<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title><![CDATA[RxRead's Blog]]></title>
    <link>http://blog.13kbook.com/</link>
    <atom:link href="/rss.xml" rel="self" type="application/rss+xml"/>
    <description><![CDATA[关注Android、WP、Java、C#、自我认知、程序安全等]]></description>
    <pubDate>Fri, 02 Jan 2015 15:17:39 GMT</pubDate>
    <generator>http://zespia.tw/hexo/</generator>
    
    <item>
      <title><![CDATA[Python抓取单个网页中所有的PDF文档]]></title>
      <link>http://blog.13kbook.com/2014/11/11/python_webpage_crawling/</link>
      <guid>http://blog.13kbook.com/2014/11/11/python_webpage_crawling/</guid>
      <pubDate>Tue, 11 Nov 2014 13:49:53 GMT</pubDate>
      <description>
      <![CDATA[<h1 id="1-背景">1.背景</h1>
<p>最近发现算法以及数据结构落下了不少（其实还是大学没怎么好好学，囧rz），考虑到最近的项目结构越来越复杂了，用它来练练思路，就打算复习下数据结构与算法。结合最近在学英语，然后干脆就用英文喽。然后选定一本参考书籍《Data Str]]>
      </description>
      <content:encoded><![CDATA[<h1 id="1-背景">1.背景</h1>
<p>最近发现算法以及数据结构落下了不少（其实还是大学没怎么好好学，囧rz），考虑到最近的项目结构越来越复杂了，用它来练练思路，就打算复习下数据结构与算法。结合最近在学英语，然后干脆就用英文喽。然后选定一本参考书籍《Data Structures and Algorithms in Java》。<br>刚开始看还是蛮吃力的，慢慢来。由于之前有翻录书籍附录的习惯，于是就去书籍附带的官网看了下，发现<a href="http://ww0.java4.datastructures.net/handouts/" target="_blank" rel="external">http://ww0.java4.datastructures.net/handouts/</a> 里面附带的PDF文档居然不错，图文并茂，作为理解是个不错的材料，果断要下载啊。但是，尼玛，结果发现，好多个，这一个一个另存为真是要命，想想还是用什么办法下载下来吧。</p>
<h1 id="2-实现">2.实现</h1>
<p>考虑目前学过的了解的所有语言，可以用来实现的，排列一下程度：</p>
<ol>
<li>Java/Android  熟悉</li>
<li>C# 熟悉</li>
<li>Python 了解语法</li>
<li>Javascript 了解一些  </li>
<li>C/C++ 了解语法</li>
</ol>
<p>为了实现这个，当然是最简单最快最好了。考虑到大学一直用C#，要不用它？但发现OSX平台只能用Mono了，还得重新熟悉。Java实现也不快，从需要的时间考虑。Javascript不熟，貌似可以用node.js去写(atom就是用的它)。不熟。C/C++好多年没用过了，而且，实现起来代码一大堆，特别麻烦。再考虑之前一段时间正好在Codecademy学过语法，就拿它来练手吧。<br>OK，确定了用Python。后续就是怎么去请求网络了，解析网页html标签，提取下载链接，下载文件了。虽然不懂这些在Python里面是怎么实现的，但是流程是确定的，按照流程去网站找现成的，此处不研究原理，实现功能即可。<br>接下来就是各种搜索引擎搜索东西了，Google可，百度亦可（不同引擎侧重不一样）。不要忘了目的是什么，搜索相关的资料。<br>好了，搜索之后，确定请求网络下载网页用requests，解析html用BeautifulSoup，提取下载链接BeautifulSoup，下载文档（stackoverflow中找到了一段下载文件的代码）。<br>然后就是把她们一起组合了。组合之后的代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#file-name: pdf_download.py</span></div><div class="line">__author__ = <span class="string">'rxread'</span></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_file</span><span class="params">(url, index)</span>:</span></div><div class="line">    local_filename = index+<span class="string">"-"</span>+url.split(<span class="string">'/'</span>)[-<span class="number">1</span>]</div><div class="line">    <span class="comment"># NOTE the stream=True parameter</span></div><div class="line">    r = requests.get(url, stream=<span class="keyword">True</span>)</div><div class="line">    <span class="keyword">with</span> open(local_filename, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</div><div class="line">        <span class="keyword">for</span> chunk <span class="keyword">in</span> r.iter_content(chunk_size=<span class="number">1024</span>):</div><div class="line">            <span class="keyword">if</span> chunk: <span class="comment"># filter out keep-alive new chunks</span></div><div class="line">                f.write(chunk)</div><div class="line">                f.flush()</div><div class="line">    <span class="keyword">return</span> local_filename</div><div class="line"></div><div class="line"><span class="comment">#http://ww0.java4.datastructures.net/handouts/</span></div><div class="line">root_link=<span class="string">"http://ww0.java4.datastructures.net/handouts/"</span></div><div class="line">r=requests.get(root_link)</div><div class="line"><span class="keyword">if</span> r.status_code==<span class="number">200</span>:</div><div class="line">    soup=BeautifulSoup(r.text)</div><div class="line">    <span class="comment"># print soup.prettify()</span></div><div class="line">    index=<span class="number">1</span></div><div class="line">    <span class="keyword">for</span> link <span class="keyword">in</span> soup.find_all(<span class="string">'a'</span>):</div><div class="line">        new_link=root_link+link.get(<span class="string">'href'</span>)</div><div class="line">        <span class="keyword">if</span> new_link.endswith(<span class="string">".pdf"</span>):</div><div class="line">            file_path=download_file(new_link,str(index))</div><div class="line">            <span class="keyword">print</span> <span class="string">"downloading:"</span>+new_link+<span class="string">" -&gt; "</span>+file_path</div><div class="line">            index+=<span class="number">1</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"all download finished"</span></div><div class="line"><span class="keyword">else</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">"errors occur."</span></div></pre></td></tr></table></figure>

<p>运行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python pdf_download.py</div></pre></td></tr></table></figure>

<p>便可以把所有的pdf文档下载到本地。</p>
<h1 id="3-优化">3.优化</h1>
<p>30多行代码，全部搞定，真是简洁明了，果然做Python用来一些脚本任务还是不错的。利用它下载了41个文档。<br>最开始下载下来的文档没有序号，这样看的时候就不知道先后，于是我给文件名前面加了个序号。<br>其他的优化部分可以参考如下：</p>
<ol>
<li>考虑现在函数的一些异常出错没有处理，后续需要处理。</li>
<li>函数没有完全封装，下载的文件类型支持不多，这个后续可以根据自己的需求进行扩展。  </li>
<li>下载的文件少的时候可能这样就行了，但是文件多的话，是有必要使用多个线程（适量的数量）或者线程池去下载，从而加快下载速度。  </li>
<li>有些写法可能不符合python语法规范，当然写了与没写已经是0和1的区别了。</li>
<li>其他细节，比如pdf有可能是大写的PDF。  </li>
</ol>
<h1 id="4-附录">4.附录</h1>
<ol>
<li>《Data Structures and Algorithms in Java》(Michael T. Goodrich, Roberto Tamassia)下载 <a href="http://bookzz.org/" target="_blank" rel="external">http://bookzz.org/</a> 或者 <a href="http://it-ebooks.info/" target="_blank" rel="external">http://it-ebooks.info/</a><br>以下两个网站都是不错的书籍下载网站，有条件还是买本正版书籍支持一下作者吧。<br>一般我会先下载电子书看下，合适就买纸质版。  </li>
<li>Python语法入门 <a href="http://www.codecademy.com/zh/tracks/python" target="_blank" rel="external">http://www.codecademy.com/zh/tracks/python</a>  </li>
</ol>
<p>以上，便是如此了。  </p>
<p>本文来自<a href="&quot;http://waylife.github.io&quot;">RxRead’s Blog</a>,欢迎转载，转载请注明。<br>欢迎一起交流探讨。</p>
]]></content:encoded>
      <comments>http://blog.13kbook.com/2014/11/11/python_webpage_crawling/#disqus_comments</comments>
    </item>
    
    <item>
      <title><![CDATA[应用市场高速下载以及网页端调起APP页面研究与实现]]></title>
      <link>http://blog.13kbook.com/2014/10/27/appmall_highspeeddownload_and_app_invoke/</link>
      <guid>http://blog.13kbook.com/2014/10/27/appmall_highspeeddownload_and_app_invoke/</guid>
      <pubDate>Mon, 27 Oct 2014 15:05:53 GMT</pubDate>
      <description>
      <![CDATA[<p>好久没写博客了，好大一个坑。正好，最近刚做完应用市场的高速下载功能，便拿来填了这个坑。<br>话说产品为了增加用户量，提升用户活跃度以及配合推广，更坑爹的是看到其他市场也有这些功能，等等，要求做一个捆绑下载的功能。WTF。<br>当然吐槽归吐槽，任务还是要完成的。<br>具]]>
      </description>
      <content:encoded><![CDATA[<p>好久没写博客了，好大一个坑。正好，最近刚做完应用市场的高速下载功能，便拿来填了这个坑。<br>话说产品为了增加用户量，提升用户活跃度以及配合推广，更坑爹的是看到其他市场也有这些功能，等等，要求做一个捆绑下载的功能。WTF。<br>当然吐槽归吐槽，任务还是要完成的。<br>具体要求是：<br>用户在手机浏览WAP站点的时候，<del><strong><em>1.进入应用详情页时打开本应用(应用市场)里面的详情页面 2.点击WAP端高速下载时，如果本应用已安装，则调用本应用进行下载，否则下载本应用的捆绑包，安装完成之后，在本应用打开时去下载之前用户想下载的应用。</em></strong></del><br>如何实现这两个功能呢？以下逐步分析：  </p>
<h1 id="1-功能需求">1.功能需求</h1>
<p>如之前所描述。<br>一般来说，完成之前的两个功能，一般都是需要应用已安装并且在后台运行(最简单的理解就是应用打开过应用，并且没有被其他程序杀死)，因此此处也默认这种情形才算应用已安装；否则，一概认为是未安装（以下没有特别说明，均为这种情况）。</p>
<h1 id="2-竞品分析">2.竞品分析</h1>
<p>当然，既然竞品有了这些功能，那就先拿来主义，研究下他们是怎么做的吧。通过Chrome抓包分析，最后分析如下。  </p>
<ul>
<li>百度手机助手 <a href="http://127.0.0.1:6259/***" target="_blank" rel="external">http://127.0.0.1:6259/***</a>  </li>
<li>搜狗手机助手 <a href="http://127.0.0.1:12388/***" target="_blank" rel="external">http://127.0.0.1:12388/***</a></li>
<li>豌豆荚 自定义协议wandoujia://detail/app/cn.buding.martin<br>百度手机助手以及搜狗手机助手的方案基本是一致的，<del><strong><em>采用的是访问一个手机本地服务地址127.0.0.1（回环地址）,端口地址有所不同</em></strong></del>，豌豆荚采用的是自定义协议，后续让浏览器自动帮它分发给注册了wandoujia协议的Activity。</li>
</ul>
<hr>
<ol>
<li><strong>打开应用详情</strong> 这个在打开浏览器相应详情页面时，百度手机助手以及搜狗手机助手同时访问本地回环地址，而豌豆荚则调用自定义协议由系统调用相关的应用（一般就是豌豆荚）。  </li>
<li><strong>高速下载原理</strong> 豌豆荚没有实现在应用已安装情形下调用客户端进行下载，在点击下载时，询问用是下载捆绑包还是直接下载想要下载的应用（描述文案见文末附图，文案有诱导性）。选择下载捆绑包，则下载一个特定文件名的豌豆荚安装包。在安装完成之后，去扫描特定的目录（一般是download以及常见浏览器的下载目录），如果存在符合规则的文件，则提取相关的资源ID，后续再下载捆绑的APP。<br>在应用没有安装的情形下。而百度手机与搜狗手机助手点击高速下载（名字也有诱导），则直接下载一个APP，所有APP内容一样，但是APP名字有所不同，均类似于app_捆绑id_xx.apk，比如搜狗手机助手捆绑微信的为MobileTools_8271386494777466339_71.apk，捆绑其他包的捆绑id有所不同。其他流程同豌豆荚。如果存在多个符合条件的apk，搜狗手机助手则取最新的信息进行下载，百度手机助手没有研究。<br>如果手机APP已经安装。豌豆荚没有实现，而百度手机助手以及搜狗手机助手，则是浏览器网页直接请求一个回环地址(127.0.0.1:port/actionpath?parameter)，port为端口地址，百度手机助手为6259，搜狗手机助手为12388。actionpath为需要进行的操作，不同的操作，值也不一致 parameter为相关操作的参数，在这里把需要捆绑下载的APP数据传过去。手机APP通过应用内的HTTP服务器接收到相关数据后进行应用下载，同时返回相应的数据。  </li>
</ol>
<h1 id="3-最后方案">3.最后方案</h1>
<p><strong>调起详情页面</strong>，采用HTTP服务器以及自定义协议两种都可以，而且自定义协议不用一直在后台跑一个承载HTTP服务器的Service，会比较省电。<br>后续的<strong>高速下载</strong>，豌豆荚是没有了，既然之前说到自定义协议省电，能否考虑呢？再结合需求，看下，应用未安装的情形下，直接下载捆绑包，两种都没有问题；应用已安装的情形，调起客户端进行下载。自定义协议可以做到么？如何知道应用是否安装了呢？浏览器有相应的API么？显然没有，就算有，也只可能部分有，但是要支持所有的浏览器。唯一的办法就是通过访问HTTP服务器，同时设置超时时间，一定时候内没有响应则认为应用未安装，下载相应的捆绑包。而且，通过HTTP服务器后续扩展也好，可以通过网页服务器与Web进行双向互动，比如百度手机助手可以通过web获得位置信息。而自定义协议就显然做不到这些。当然除了省电。<br>高速下载的调起解决了，那如果应用没有安装，在本应用安装完成之后，如何知道之前用户需要下载的是哪个应用呢？也就是<strong>捆绑应用的识别</strong>。<br>应用市场最开始的方案是在应用里面（asset文件夹下）打入一个文件，存放有捆绑应用的id号。但是，针对少量应用可以（最开始为了测试捆绑效果时用过），目前来说，针对大量应用肯定不行，需要打大量的包，而且需要不少存储空间。<br>参考竞品的方案，确实很完美，但是，考虑目前大部分的手机安全或者清理软件，都会在应用安装成功后提示删除安装包，同时，浏览器的下载目录可能会会变。那这里能扫描整个SD卡，去寻找符合条件的文件么？肯定不行，太消耗时间了。<br>那在应用没有安装或者没有在后台运行的情形下，如何知道捆绑的应用id呢。以上两个方案都不完美，如何解决。与后端彦飞探讨过，在高速下载apk时，网页记录手机下载的捆绑app id以及packagename以及该设备的唯一id（uuid），然后在打开市场时，请求相应的接口并把uuid传入，获得数据，从而下载相应的应用。想法超赞，后来发现没有实用价值，uuid暂时没有一个合理的方案。关键在于两端生成的都要唯一，mac，ip？如何生成？<br>后来吃饭与国畅探讨后，考虑是不是可以调用本地代码去执行相关任务？但仔细思考过后，发现这个一般是WebView与js进行交互。而目前的使用场景根本就无法做到。这个Webview必须要是自己应用内的才可以。<br>考虑多方面因素，最后决定，参考百度手机助手以及搜狗手机助手的方案，尽管有缺陷。<br>关于自定义协议模式，可参考此文章，<a href="http://www.oschina.net/code/snippet_256033_35330" target="_blank" rel="external">android自定义协议和html加载时自动尝试调用本地APP</a>，以及<a href="http://www.pocketdigi.com/20101002/117.html" target="_blank" rel="external">Android 注册监听自定义协议</a>，本文不做过多介绍。<br><del><strong><em>最后的方案就是手机端后台通过Service运行一个HttpServer，监听12307端口。</em></strong></del></p>
<h2 id="调起客户端">调起客户端</h2>
<h3 id="1-高速下载">1.高速下载</h3>
<p>网页端点击高速下载时，访问<a href="http://127.0.0.1:12307/appdown?downid=1&amp;packagename=com.sogou.map" target="_blank" rel="external">http://127.0.0.1:12307/appdown?downid=1&amp;packagename=com.sogou.map</a><br>如果成功，返回json串形式为  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">{</div><div class="line">  <span class="string">"status"</span>:<span class="number">1</span>,</div><div class="line">  <span class="string">"message"</span>:<span class="string">"OK"</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>status为0表示失败，status为1表示成功。message为具体描述。<br>如果在一定时间内手机没有响应，则默认应用没有安装，下载捆绑APK包。<br>如果手机端响应了，则网页端不做任何处理，手机端获得相应的downid以及packagename，先判断应用是否已经安装，如果安装，则提示应用已安装，如果未安装，则提示用户应用正在下载，然后加入下载列表。  </p>
<h3 id="2-打开详情页面">2.打开详情页面</h3>
<p><a href="http://127.0.0.1:12307/godetail?downid=1&amp;packagename=com.sogou.map&amp;backtohome=ture" target="_blank" rel="external">http://127.0.0.1:12307/godetail?downid=1&amp;packagename=com.sogou.map&amp;backtohome=ture</a><br>backtohome为true时，按下手机端的返回按钮回到应用的主页，为false时返回浏览器。（可参考豌豆荚，比如<a href="http://www.wandoujia.com/apps/com.tencent.mm" target="_blank" rel="external">http://www.wandoujia.com/apps/com.tencent.mm</a>必须手机端访问，User-Agent与PC访问不同）  </p>
<h2 id="安装包应用捆绑">安装包应用捆绑</h2>
<p>如何识别捆绑的是哪个应用呢？<br>后续参考竞品的实现方式，通过下载文件名不同（文件名有规则）的文件，在用户安装应用并且打开后去读取下载文件夹，判断是否存在符合规则的apk。如果存在，提取相应的id，去进行相应的下载。只要服务器提供接口让浏览器在下载同一个文件显示为不同的文件名即可。<br>比如搜狗手机助手的一个微信详情地址为<a href="http://wap.sogou.com/app/apkdetail.jsp?ppid=34&amp;cid=49&amp;docid=8271386494777466339&amp;e=1394" target="_blank" rel="external">http://wap.sogou.com/app/apkdetail.jsp?ppid=34&amp;cid=49&amp;docid=8271386494777466339&amp;e=1394</a>，高速下载安装包的地址是<a href="http://download.zhushou.sogou.com/zhushou/android/MobileTools.apk?dn=MobileTools_8271386494777466339_71.apk" target="_blank" rel="external">http://download.zhushou.sogou.com/zhushou/android/MobileTools.apk?dn=MobileTools_8271386494777466339_71.apk</a><br>下载下来的apk名称为MobileTools_8271386494777466339_71.apk。捆绑的应用id为8271386494777466339，应用为微信。通过设置HTTP返回数据的headers的<code>Content-Disposition</code>字段为<code>attachment;filename=&quot;MobileTools_8271386494777466339_71.apk&quot;</code>就可以实现，一般来说，主流浏览器都支持该属性。  </p>
<p>因此，最终确定，APK的命名方式为XXXX_binding_downid_9.apk，判断应用为这种格式（可通过正则匹配）就会提取downid（downid必须为整数）。应用未安装时，点击高速下载，下载以上规则命名的apk到文件夹。用户安装应用并打开应用时，去扫描常用的下载文件夹（常见的/download,/downloads,以及浏览器下载文件夹等）里面的apk，有符合规则的则提取某一个文件中的id，提取完成之后，进行下载，同时把安装包删除（防止对之后进行干扰）。考虑到同一个文件夹可能有多个符合规则的安装包，则按照时间顺序取当前文件夹符合规则的时间最近的两个，其他的文件夹的忽略，等下次启动再处理（一般这种情况也比较少）。当然还有其他一些细节需要处理，此处不再详谈。  </p>
<h1 id="4-性能优化与展望">4.性能优化与展望</h1>
<p>程序优化，是有追求的攻城师必须做的事情，因此，当然要优化喽。<br>为了省电，指定了以下两条策略。  </p>
<ol>
<li>在网络变化时，如果没有网络，则关闭服务，有网络，则打开服务。解屏以及锁屏时分别打开以及关闭服务。  </li>
<li>有网，且屏幕打开是触发服务开启的必要条件。可以大部分降低应用在锁屏状态下有网络变化而导致的耗电问题。<br>以上两个策略可叠加使用，可能会有些问题，比如有些时候条件都符合，但是服务没有开启（网络十分频繁的切换可能会导致）。<br>设定为以上条件是因为，后续的操作都是有网才能完成，其次，锁屏状态下，一般用户是没办法触发相关的流程的，除非程序自动触发（即时通讯软件接收信息比如，或者自动下载，但是这太流氓了）才需要在锁屏时在后台跑。</li>
</ol>
<p>HTTP服务器是用的Github上开源的<a href="https://github.com/NanoHttpd/nanohttpd" target="_blank" rel="external">Nanohttpd</a>，http服务器除了高速下载，也可以用在，比如传输数据到电脑，应用与网页交互等等很多方面。  </p>
<h1 id="5-最终实现">5.最终实现</h1>
<p>可访问<a href="http://app.sogou.com/m" target="_blank" rel="external">http://app.sogou.com/m</a> 查看最终效果。<br>大致的思路就是以上描述。希望对大家有所启发，起个抛砖引玉的作用。<br>目前暂时未上线，估计等到11月5号。  </p>
<h1 id="6-相关工具以及附录">6.相关工具以及附录</h1>
<p>（1）Chrome 开发者工具+设备模式（数据抓包）<br>（2）三个市场的微信下载的演示地址：<a href="http://m.baidu.com/app?action=content&amp;uid=0&amp;from=844b&amp;ssid=0&amp;bd_page_type=1&amp;pu=sz@1320_224#docid=7106818&amp;ala=se@v@1@3@title&amp;f=aladdin@%E5%BE%AE%E4%BF%A1" target="_blank" rel="external">百度手机助手</a>，<a href="http://wap.sogou.com/app/apkdetail.jsp?ppid=34&amp;cid=49&amp;docid=8271386494777466339&amp;e=1394" target="_blank" rel="external">搜狗手机助手</a>，<a href="http://www.wandoujia.com/apps/com.tencent.mm" target="_blank" rel="external">豌豆荚</a><br>当时（2014-10-27的页面截图如下）<br><img src="https://raw.githubusercontent.com/waylife/blogimage/master/2014/10/binding_app_baidu_sogouzhushou_wandou.jpg" alt="百度手机助手-搜狗手机助手-豌豆荚__微信捆绑下载图"><br>（3）常见浏览器的APK下载路径（#表示该行是注释，每行一个目录，目前不支持遍历子目录）  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#this is the binding apk file path</span></div><div class="line"><span class="comment">#this is  a comment</span></div><div class="line"><span class="comment">#some system default, Chrome, Opera, Opera mini, Sogou Broswer, ES File Explorer,Dolphin Browser</span></div><div class="line">download</div><div class="line"><span class="comment">#meizu browser, some system default</span></div><div class="line">download/apk</div><div class="line">downloads</div><div class="line"><span class="comment">#vivo</span></div><div class="line">下载</div><div class="line">下载/App</div><div class="line"><span class="comment">#uc browser</span></div><div class="line">UCDownloads</div><div class="line"><span class="comment">#QQ Broswer</span></div><div class="line">QQBrowser/安装包</div><div class="line">QQBrowser/下载</div><div class="line">qqbrowser/download</div><div class="line"><span class="comment">#QQ Broswer HD</span></div><div class="line">QQBrowser</div><div class="line"><span class="comment">#baidu broswer</span></div><div class="line">baidu/flyflow/downloads</div><div class="line"><span class="comment">#baidu app</span></div><div class="line">baidu/searchbox/downloads</div><div class="line"><span class="comment">#Maxthon Broswer</span></div><div class="line">MxBrowser/Downloads</div><div class="line">TTDownload/installapk</div><div class="line">Application</div><div class="line">ThunderDownload</div><div class="line"><span class="comment">#liebao broswer</span></div><div class="line">kbrowser_fast/download/App</div><div class="line"><span class="comment">#360 Broswer</span></div><div class="line"><span class="number">360</span>Browser/download</div><div class="line"><span class="comment">#360 Express Broswer</span></div><div class="line"><span class="number">360</span>ExpressBrowser/download</div><div class="line"><span class="comment">#2345 broswer</span></div><div class="line">Download/<span class="number">2345</span>浏览器下载/安装包</div><div class="line"><span class="comment">#hao123</span></div><div class="line">hao123/down/apk</div><div class="line">DolphinBrowserCN/download</div><div class="line">UCDLFiles</div><div class="line">QCDownload</div><div class="line">LXDOWNLOAD/DOWNLOAD</div><div class="line">apc/ApcBrowser/downloads</div><div class="line"><span class="comment">#YueDong Broswer,Ignore,The apk file name is changed by the broswer,the same with 4G Explorer(do not support header's Content-Disposition attribute)</span></div><div class="line"><span class="comment">#ydBrowser/download</span></div><div class="line"><span class="comment">#4G-explorer/apks</span></div></pre></td></tr></table></figure>

<p>哈哈哈哈，完美解决所有问题。之后还可以扩展。<br><img src="https://github.com/waylife/blogimage/raw/master/common/quick_run.gif" alt=" "><br><img src="https://github.com/waylife/blogimage/raw/master/common/simle_1.gif" alt=""></p>
<p>本文来自<a href="http://waylife.github.io" target="_blank" rel="external">RxRead’s Blog</a>,欢迎转载，转载请注明。  </p>
]]></content:encoded>
      <comments>http://blog.13kbook.com/2014/10/27/appmall_highspeeddownload_and_app_invoke/#disqus_comments</comments>
    </item>
    
    <item>
      <title><![CDATA[Hello World]]></title>
      <link>http://blog.13kbook.com/2014/10/06/hello_world/</link>
      <guid>http://blog.13kbook.com/2014/10/06/hello_world/</guid>
      <pubDate>Mon, 06 Oct 2014 07:15:44 GMT</pubDate>
      <description>
      <![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io]]>
      </description>
      <content:encoded><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">trobuleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick_Start">Quick Start</h2>
<h3 id="Create_a_new_post">Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>

<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server">Run server</h3>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>

<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files">Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>

<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites">Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>

<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content:encoded>
      <comments>http://blog.13kbook.com/2014/10/06/hello_world/#disqus_comments</comments>
    </item>
    
  </channel>
</rss>